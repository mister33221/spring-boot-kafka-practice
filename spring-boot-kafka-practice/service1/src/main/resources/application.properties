# port
server.port=8080

# kafka config
spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id= group-id
spring.kafka.consumer.auto-offset-reset= earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
# acks: 0, 1, all. 0 means no acks, 1 means acks from leader, all means acks from all replicas
spring.kafka.producer.acks= all
# retries: number of retries
spring.kafka.producer.retries= 0

spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer

# spring.kafka.admin.properties.default.replication.factor mwans the number of replicas
spring.kafka.admin.properties.default.replication.factor= 3
# spring.kafka.listener.ack-mode means the ack mode, has
#        RECORD: ack after each record is processed
#        BATCH: ack after all records in a batch are processed
#        TIME: ack after a time span of the last record processed
#        COUNT: ack after a number of records are processed
#        COUNT_TIME: ack after a number of records or a time span is reached
#        MANUAL: the user must ack manually
#        MANUAL_IMMEDIATE: the user must ack manually in the listener thread
spring.kafka.listener.ack-mode= BATCH

# how set producer ack

# transactional.id: transaction id
#spring.kafka.producer.transactional-id= transaction-id
